function attacher() {
    const inner = function(args) {
        // run the functions inside inner.pres first
        const preval = inner.pres.reduce((accumulator, currentvalue) => {
            return Object.assign(accumulator, currentvalue(Object.assign({}, accumulator)));
        }, Object.assign({}, args));

        // then run the function inner.once
        const onceval = Object.assign(preval, inner.once(Object.assign({}, preval)));

        // then run each of the functions in inner.posts
        const postval = inner.posts.reduce((accumulator, currentvalue) => {
            return Object.assign(accumulator, currentvalue(Object.assign({}, accumulator)));
        }, Object.assign({}, onceval));

        // then return the accumulated value
        return postval;
    }

    inner.pre = function(outer) {
        inner.pres.push(outer);
        inner.last = inner.pres;
        return inner;
    }

    inner.post = function(outer) {
        inner.posts.push(outer);
        inner.last = inner.post;
        return inner;
    }

    inner.when = function(pred) {
        if (inner.last && inner.last.length > 0) {
            const lastfunc = inner.last.pop();
            const wrappedfunc = (args) => {
                if (pred(args)) {
                    return lastfunc(args);
                } else {
                    return args;
                }
            }
            inner.last.push(wrappedfunc);
        }
        return inner;
    }

    inner.unless = function(pred) {
        inner.when(args => {return !pred(args)});
        return inner;
    }

    inner.last;
    inner.pres = [];
    inner.posts = [];
    inner.once = function(args) {
        return args;
    }

    return inner;
}

module.exports = attacher;